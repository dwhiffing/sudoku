{"version":3,"sources":["utils.js","Cell.js","Controls.js","App.js","index.js"],"names":["getRowIndex","boardIndex","boardSize","Math","floor","getColumnIndex","getBoxIndex","boxSize","baseValue","ceil","offset","getRowByBoardIndex","board","startingIndex","slice","getColumnByBoardIndex","columnIndex","filter","c","i","getBoxByBoardIndex","houseIndex","isHouseValidForValue","house","value","isIncoming","length","getIsCellValidForBoard","index","shift","arr","step","checkIsValid","every","cell","solvePuzzle","n","Cell","isHighlighted","isSelected","onClick","isValid","isGiven","rowIndex","borderBottomWidth","borderRightWidth","borderLeftWidth","borderTopWidth","className","style","borderColor","fontWeight","color","active","opacity","display","justifyContent","alignItems","Fill","children","position","top","right","bottom","left","backgroundColor","Button","Controls","onClickValue","activeNumber","onErase","map","key","App","useState","setActiveNumber","activeCell","setActiveCell","numGivens","split","shuffle","lastRow","concat","rows","chunk","flat","cols","zip","numNulls","nulls","Array","fill","console","log","isSolvable","generateBoard","givens","setBoard","updateBoard","onClickCell","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8e92300c.chunk.js","sourcesContent":["import shuffle from 'lodash/shuffle'\nimport chunk from 'lodash/chunk'\nimport zip from 'lodash/zip'\n\nexport const getRowIndex = (boardIndex, boardSize = 9) => {\n  if (typeof boardIndex !== 'number') return null\n\n  return Math.floor(boardIndex / boardSize)\n}\n\nexport const getColumnIndex = (boardIndex, boardSize = 9) => {\n  if (typeof boardIndex !== 'number') return null\n\n  return boardIndex % boardSize\n}\n\nexport const getBoxIndex = (boardIndex, boardSize = 9) => {\n  if (typeof boardIndex !== 'number') return null\n\n  const boxSize = Math.floor(boardSize / 3)\n  const baseValue = Math.ceil((boardIndex + 1) / boxSize) - 1\n  const offset =\n    -boxSize * getRowIndex(boardIndex) +\n    Math.floor(boardIndex / Math.floor(boardSize * 3)) * boxSize\n  return baseValue + offset\n}\n\nexport const getRowByBoardIndex = (board, boardIndex) => {\n  if (typeof boardIndex !== 'number') return []\n\n  const rowIndex = getRowIndex(boardIndex)\n  const startingIndex = rowIndex * 9\n  return board.slice(startingIndex, startingIndex + 9)\n}\n\nexport const getColumnByBoardIndex = (board, boardIndex) => {\n  if (typeof boardIndex !== 'number') return []\n\n  const columnIndex = getColumnIndex(boardIndex)\n  return board.filter((c, i) => getColumnIndex(i) === columnIndex)\n}\n\nexport const getBoxByBoardIndex = (board, boardIndex) => {\n  if (typeof boardIndex !== 'number') return []\n\n  const houseIndex = getBoxIndex(boardIndex)\n  return board.filter((c, i) => getBoxIndex(i) === houseIndex)\n}\n\nconst isHouseValidForValue = (house, value, isIncoming = false) => {\n  if (typeof value !== 'number') {\n    return !isIncoming\n  }\n  return house.filter(c => c === value).length <= (isIncoming ? 0 : 1)\n}\n\nexport const getIsCellValidForBoard = (\n  board,\n  index,\n  value,\n  { isIncoming = false } = {},\n) => {\n  return (\n    isHouseValidForValue(getBoxByBoardIndex(board, index), value, isIncoming) &&\n    isHouseValidForValue(getRowByBoardIndex(board, index), value, isIncoming) &&\n    isHouseValidForValue(getColumnByBoardIndex(board, index), value, isIncoming)\n  )\n}\n\nexport const generateBoard = ({ numGivens = 30 } = {}) => {\n  let board = '123456789'.split('').map(n => +n)\n  board = shuffle(board)\n\n  for (let i = 0; i < 8; i++) {\n    const step = i === 2 || i === 5 ? 1 : 3\n    const lastRow = board.slice(i * 9, i * 9 + 9)\n    board = board.concat(shift(lastRow, step))\n  }\n\n  const rows = chunk(board, 27)\n  board = shuffle(rows).flat()\n  const cols = chunk(zip(...chunk(board, 9)).flat(), 27)\n  board = shuffle(cols).flat()\n\n  const numNulls = 81 - numGivens\n  const nulls = shuffle([\n    ...new Array(numNulls).fill(false),\n    ...new Array(numGivens).fill(true),\n  ])\n  board = board.map((cell, i) => (nulls[i] ? cell : false)).flat()\n\n  console.log({\n    isValid: checkIsValid(board),\n    isSolvable: solvePuzzle([...board]),\n  })\n\n  return board\n}\n\nconst shift = (arr, step = 1) => [...arr.slice(step), ...arr.slice(0, step)]\n\nexport const logBoardState = (board, activeCell) => {\n  const activeRowIndex = getRowIndex(activeCell)\n  const activeColumnIndex = getColumnIndex(activeCell)\n  const activeHouseIndex = getBoxIndex(activeCell)\n\n  const activeRow = getRowByBoardIndex(board, activeCell).join('')\n  const activeColumn = getColumnByBoardIndex(board, activeCell).join('')\n  const activeHouse = getBoxByBoardIndex(board, activeCell).join('')\n\n  console.log({\n    activeCell,\n    activeRow,\n    activeColumn,\n    activeHouse,\n    activeRowIndex,\n    activeColumnIndex,\n    activeHouseIndex,\n  })\n}\n\nconst checkIsValid = board =>\n  board.every((cell, index) => getIsCellValidForBoard(board, index, cell))\n\nconst solvePuzzle = board => {\n  for (let i = 0; i < 81; i++) {\n    if (typeof board[i] !== 'number') {\n      for (let n = 1; n <= 9; n++) {\n        if (getIsCellValidForBoard(board, i, n, { isIncoming: true })) {\n          board[i] = n\n          if (solvePuzzle(board)) {\n            return true\n          } else {\n            board[i] = false\n          }\n        }\n      }\n      return false\n    }\n  }\n  return true\n}\n","import React from 'react'\nimport { getRowIndex, getColumnIndex } from './utils'\n\nexport const Cell = ({\n  isHighlighted,\n  isSelected,\n  value,\n  boardIndex,\n  onClick,\n  boardSize = 9,\n  isValid = true,\n  isGiven,\n}) => {\n  const rowIndex = getRowIndex(boardIndex, boardSize)\n  const columnIndex = getColumnIndex(boardIndex, boardSize)\n\n  let borderBottomWidth = rowIndex === boardSize - 1 ? 2 : 1\n  let borderRightWidth = columnIndex === boardSize - 1 ? 2 : 1\n  let borderLeftWidth = columnIndex === 0 ? 2 : 0\n  let borderTopWidth = rowIndex === 0 ? 2 : 0\n\n  if (boardSize === 9) {\n    if (columnIndex > 0 && columnIndex % 3 === 0) {\n      borderLeftWidth += 1\n    }\n\n    if (rowIndex > 0 && rowIndex % 3 === 0) {\n      borderTopWidth += 1\n    }\n  }\n\n  return (\n    <div\n      className={`cell`}\n      onClick={() => onClick && onClick(boardIndex, value)}\n      style={{\n        borderColor: isSelected ? 'black' : '#666',\n        fontWeight: isGiven || isSelected ? 'bold' : 'normal',\n        color: isGiven ? 'blue' : 'black',\n        borderBottomWidth,\n        borderRightWidth,\n        borderLeftWidth,\n        borderTopWidth,\n      }}\n    >\n      <Fill active={!isValid} color=\"red\" opacity={0.5} />\n\n      <Fill active={isValid && isHighlighted} color=\"yellow\" opacity={0.5} />\n\n      <Fill active={isSelected} color=\"gray\" opacity={0.5} />\n\n      <Fill\n        active\n        style={{\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}\n      >\n        {value}\n      </Fill>\n    </div>\n  )\n}\n\nconst Fill = ({ active, children, color, opacity = 1, style = {} }) => (\n  <div\n    style={{\n      position: 'absolute',\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n      opacity,\n      backgroundColor: active ? color : 'transparent',\n      ...style,\n    }}\n  >\n    {children}\n  </div>\n)\n","import React from 'react'\nimport { Cell } from './Cell'\n\nconst Button = ({ value, onClick }) => (\n  <div className=\"button\" onClick={onClick}>\n    {value}\n  </div>\n)\n\nexport const Controls = ({ onClickValue, activeNumber, onErase }) => {\n  const data = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  return (\n    <>\n      <div className=\"controls\">\n        <Button value=\"Hint\" onClick={() => {}} />\n        <Button value=\"Undo\" onClick={() => {}} />\n        <Button value=\"Redo\" onClick={() => {}} />\n      </div>\n      <div className=\"controls-numbers\">\n        {data.map((value, boardIndex) => (\n          <Cell\n            key={`control-cell-${boardIndex}`}\n            value={value}\n            boardIndex={boardIndex}\n            boardSize={3}\n            isHighlighted={value === activeNumber}\n            onClick={onClickValue}\n          />\n        ))}\n      </div>\n      <div className=\"controls\">\n        <Button value=\"Pencil\" onClick={() => {}} />\n        <Button value=\"Erase\" onClick={onErase} />\n        <Button value=\"Game\" onClick={() => {}} />\n      </div>\n    </>\n  )\n}\n","import React, { useState } from 'react'\nimport { Cell } from './Cell'\nimport { Controls } from './Controls'\nimport { getIsCellValidForBoard, generateBoard } from './utils'\n\nconst App = () => {\n  const [activeNumber, setActiveNumber] = useState(null)\n  const [activeCell, setActiveCell] = useState(null)\n  const [givens] = useState(generateBoard())\n  const [board, setBoard] = useState(givens)\n\n  const updateBoard = (value, boardIndex) => {\n    if (typeof givens[boardIndex] === 'number') {\n      return\n    }\n    setBoard(\n      board.map((n, i) =>\n        i === boardIndex ? (board[boardIndex] === value ? false : value) : n,\n      ),\n    )\n  }\n\n  const onClickCell = boardIndex => {\n    if (typeof activeNumber === 'number') {\n      updateBoard(activeNumber, boardIndex)\n    } else {\n      setActiveCell(activeCell === boardIndex ? null : boardIndex)\n    }\n  }\n\n  const onClickControls = (boardIndex, value) => {\n    if (typeof activeCell === 'number') {\n      updateBoard(value, activeCell)\n    } else {\n      setActiveNumber(activeNumber === value ? null : value)\n    }\n  }\n\n  return (\n    <>\n      <div className=\"title-container flex-center\">\n        <p>Sudoku</p>\n      </div>\n\n      <div className=\"board-container\">\n        <div className=\"flex-1\">\n          <div className=\"board\">\n            {board.map((value, boardIndex) => (\n              <Cell\n                key={`cell-${boardIndex}`}\n                value={value}\n                onClick={onClickCell}\n                boardIndex={boardIndex}\n                isGiven={typeof givens[boardIndex] === 'number'}\n                isSelected={activeCell === boardIndex}\n                isHighlighted={value === activeNumber}\n                isValid={getIsCellValidForBoard(board, boardIndex, value)}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"controls-container\">\n        <Controls\n          activeCell={activeCell}\n          activeNumber={activeNumber}\n          setActiveNumber={setActiveNumber}\n          onClickValue={onClickControls}\n          onErase={boardIndex => updateBoard(false, activeCell)}\n        />\n      </div>\n    </>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}